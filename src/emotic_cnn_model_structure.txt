nn.Sequential {
  [input -> (1) -> (2) -> (3) -> output]
  (1): nn.ParallelTable {
    input
      |`-> (1): nn.Sequential {
      |      [input -> (1) -> (2) -> output]
      |      (1): nn.Sequential {
      |        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> (38) -> (39) -> (40) -> (41) -> output]
      |        (1): cudnn.SpatialConvolution(3 -> 32, 11x1, 4,1, 2,0)
      |        (2): cudnn.ReLU
      |        (3): cudnn.SpatialConvolution(32 -> 64, 1x11, 1,4, 0,2)
      |        (4): nn.SpatialBatchNormalization (4D) (64)
      |        (5): cudnn.ReLU
      |        (6): cudnn.SpatialConvolution(64 -> 128, 5x1, 2,1, 2,0)
      |        (7): cudnn.ReLU
      |        (8): cudnn.SpatialConvolution(128 -> 256, 1x5, 1,2, 0,2)
      |        (9): nn.SpatialBatchNormalization (4D) (256)
      |        (10): cudnn.ReLU
      |        (11): cudnn.SpatialConvolution(256 -> 384, 3x1, 2,1, 1,0)
      |        (12): cudnn.ReLU
      |        (13): cudnn.SpatialConvolution(384 -> 512, 1x3, 1,2, 0,1)
      |        (14): nn.SpatialBatchNormalization (4D) (512)
      |        (15): cudnn.ReLU
      |        (16): cudnn.SpatialConvolution(512 -> 384, 3x1, 1,1, 1,0)
      |        (17): cudnn.ReLU
      |        (18): cudnn.SpatialConvolution(384 -> 384, 1x3, 1,1, 0,1)
      |        (19): nn.SpatialBatchNormalization (4D) (384)
      |        (20): cudnn.ReLU
      |        (21): cudnn.SpatialConvolution(384 -> 640, 3x1, 2,1, 1,0)
      |        (22): cudnn.ReLU
      |        (23): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,2, 0,1)
      |        (24): nn.SpatialBatchNormalization (4D) (640)
      |        (25): cudnn.ReLU
      |        (26): cudnn.SpatialConvolution(640 -> 640, 3x1, 1,1, 1,0)
      |        (27): cudnn.ReLU
      |        (28): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,1, 0,1)
      |        (29): nn.SpatialBatchNormalization (4D) (640)
      |        (30): cudnn.ReLU
      |        (31): cudnn.SpatialConvolution(640 -> 640, 3x1, 2,1, 1,0)
      |        (32): cudnn.ReLU
      |        (33): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,2, 0,1)
      |        (34): nn.SpatialBatchNormalization (4D) (640)
      |        (35): cudnn.ReLU
      |        (36): cudnn.SpatialConvolution(640 -> 640, 3x1, 1,1, 1,0)
      |        (37): cudnn.ReLU
      |        (38): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,1, 0,1)
      |        (39): nn.SpatialBatchNormalization (4D) (640)
      |        (40): cudnn.ReLU
      |        (41): nn.SpatialAveragePooling(4x4, 1,1)
      |      }
      |      (2): nn.View(640)
      |    }
       `-> (2): nn.Sequential {
             [input -> (1) -> output]
             (1): nn.Sequential {
               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> output]
               (1): cudnn.SpatialConvolution(3 -> 32, 3x1, 2,1, 1,0)
               (2): cudnn.ReLU
               (3): cudnn.SpatialConvolution(32 -> 64, 1x3, 1,2, 0,1)
               (4): cudnn.SpatialBatchNormalization
               (5): cudnn.ReLU
               (6): cudnn.SpatialConvolution(64 -> 128, 3x1, 2,1, 1,0)
               (7): cudnn.ReLU
               (8): cudnn.SpatialConvolution(128 -> 128, 1x3, 1,2, 0,1)
               (9): cudnn.ReLU
               (10): cudnn.SpatialBatchNormalization
               (11): cudnn.SpatialConvolution(128 -> 128, 3x1, 2,1, 1,0)
               (12): cudnn.ReLU
               (13): cudnn.SpatialConvolution(128 -> 128, 1x3, 1,2, 0,1)
               (14): cudnn.SpatialBatchNormalization
               (15): cudnn.ReLU
               (16): cudnn.SpatialAveragePooling(3x3, 16,16)
               (17): nn.View(128)
             }
           }
       ... -> output
  }
  (2): nn.JoinTable
  (3): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> 

(5) -> output]
    (1): nn.Linear(768 -> 256)
    (2): nn.BatchNormalization (2D) (256)
    (3): nn.ReLU
    (4): nn.Dropout(0.500000)
    (5): nn.ConcatTable {
      input
        |`-> (1): nn.Linear(256 -> 3)
         `-> (2): nn.Linear(256 -> 26)
         ... -> output
    }
  }
}
{
  _type : torch.CudaTensor
  output : table: 0x400a6548
  gradInput : table: 0x400a6598
  modules : 
    {
      1 : 
        nn.ParallelTable {
          input
            |`-> (1): nn.Sequential {
            |      [input -> (1) -> (2) -> output]
            |      (1): nn.Sequential {
            |        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> (38) -> (39) -> (40) -> (41) -> output]
            |        (1): cudnn.SpatialConvolution(3 -> 32, 11x1, 4,1, 2,0)
            |        (2): cudnn.ReLU
            |        (3): cudnn.SpatialConvolution(32 -> 64, 1x11, 1,4, 0,2)
            |        (4): nn.SpatialBatchNormalization (4D) (64)
            |        (5): cudnn.ReLU
            |        (6): cudnn.SpatialConvolution(64 -> 128, 5x1, 2,1, 2,0)
            |        (7): cudnn.ReLU
            |        (8): cudnn.SpatialConvolution(128 -> 256, 1x5, 1,2, 0,2)
            |        (9): nn.SpatialBatchNormalization (4D) (256)
            |        (10): cudnn.ReLU
            |        (11): cudnn.SpatialConvolution(256 -> 384, 3x1, 2,1, 1,0)
            |        (12): cudnn.ReLU
            |        (13): cudnn.SpatialConvolution(384 -> 512, 1x3, 1,2, 0,1)
            |        (14): nn.SpatialBatchNormalization (4D) (512)
            |        (15): cudnn.ReLU
            |        (16): cudnn.SpatialConvolution(512 -> 384, 3x1, 1,1, 1,0)
            |        (17): cudnn.ReLU
            |        (18): cudnn.SpatialConvolution(384 -> 384, 1x3, 1,1, 0,1)
            |        (19): nn.SpatialBatchNormalization (4D) (384)
            |        (20): cudnn.ReLU
            |        (21): cudnn.SpatialConvolution(384 -> 640, 3x1, 2,1, 1,0)
            |        (22): cudnn.ReLU
            |        (23): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,2, 0,1)
            |        (24): nn.SpatialBatchNormalization (4D) (640)
            |        (25): cudnn.ReLU
            |        (26): cudnn.SpatialConvolution(640 -> 640, 3x1, 1,1, 1,0)
            |        (27): cudnn.ReLU
            |        (28): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,1, 0,1)
            |        (29): nn.SpatialBatchNormalization (4D) (640)
            |        (30): cudnn.ReLU
            |        (31): cudnn.SpatialConvolution(640 -> 640, 3x1, 2,1, 1,0)
            |        (32): cudnn.ReLU
            |        (33): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,2, 0,1)
            |        (34): nn.SpatialBatchNormalization (4D) (640)
            |        (35): cudnn.ReLU
            |        (36): cudnn.SpatialConvolution(640 -> 640, 3x1, 1,1, 1,0)
            |        (37): cudnn.ReLU
            |        (38): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,1, 0,1)
            |        (39): nn.SpatialBatchNormalization (4D) (640)
            |        (40): cudnn.ReLU
            |        (41): nn.SpatialAveragePooling(4x4, 1,1)
            |      }
            |      (2): nn.View(640)
            |    }
             `-> (2): nn.Sequential {
                   [input -> (1) -> output]
                   (1): nn.Sequential {
                     [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> output]
                     (1): cudnn.SpatialConvolution(3 -> 32, 3x1, 2,1, 1,0)
                     (2): cudnn.ReLU
                     (3): cudnn.SpatialConvolution(32 -> 64, 1x3, 1,2, 0,1)
                     (4): cudnn.SpatialBatchNormalization
                     (5): cudnn.ReLU
                     (6): cudnn.SpatialConvolution(64 -> 

128, 3x1, 2,1, 1,0)
                     (7): cudnn.ReLU
                     (8): cudnn.SpatialConvolution(128 -> 128, 1x3, 1,2, 0,1)
                     (9): cudnn.ReLU
                     (10): cudnn.SpatialBatchNormalization
                     (11): cudnn.SpatialConvolution(128 -> 128, 3x1, 2,1, 1,0)
                     (12): cudnn.ReLU
                     (13): cudnn.SpatialConvolution(128 -> 128, 1x3, 1,2, 0,1)
                     (14): cudnn.SpatialBatchNormalization
                     (15): cudnn.ReLU
                     (16): cudnn.SpatialAveragePooling(3x3, 16,16)
                     (17): nn.View(128)
                   }
                 }
             ... -> output
        }
        {
          _type : torch.CudaTensor
          output : table: 0x400a6828
          gradInput : table: 0x400a6878
          modules : 
            {
              1 : 
                nn.Sequential {
                  [input -> (1) -> (2) -> output]
                  (1): nn.Sequential {
                    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> (38) -> (39) -> (40) -> (41) -> output]
                    (1): cudnn.SpatialConvolution(3 -> 32, 11x1, 4,1, 2,0)
                    (2): cudnn.ReLU
                    (3): cudnn.SpatialConvolution(32 -> 64, 1x11, 1,4, 0,2)
                    (4): nn.SpatialBatchNormalization (4D) (64)
                    (5): cudnn.ReLU
                    (6): cudnn.SpatialConvolution(64 -> 128, 5x1, 2,1, 2,0)
                    (7): cudnn.ReLU
                    (8): cudnn.SpatialConvolution(128 -> 256, 1x5, 1,2, 0,2)
                    (9): nn.SpatialBatchNormalization (4D) (256)
                    (10): cudnn.ReLU
                    (11): cudnn.SpatialConvolution(256 -> 384, 3x1, 2,1, 1,0)
                    (12): cudnn.ReLU
                    (13): cudnn.SpatialConvolution(384 -> 512, 1x3, 1,2, 0,1)
                    (14): nn.SpatialBatchNormalization (4D) (512)
                    (15): cudnn.ReLU
                    (16): cudnn.SpatialConvolution(512 -> 384, 3x1, 1,1, 1,0)
                    (17): cudnn.ReLU
                    (18): cudnn.SpatialConvolution(384 -> 384, 1x3, 1,1, 0,1)
                    (19): nn.SpatialBatchNormalization (4D) (384)
                    (20): cudnn.ReLU
                    (21): cudnn.SpatialConvolution(384 -> 640, 3x1, 2,1, 1,0)
                    (22): cudnn.ReLU
                    (23): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,2, 0,1)
                    (24): nn.SpatialBatchNormalization (4D) (640)
                    (25): cudnn.ReLU
                    (26): cudnn.SpatialConvolution(640 -> 640, 3x1, 1,1, 1,0)
                    (27): cudnn.ReLU
                    (28): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,1, 0,1)
                    (29): nn.SpatialBatchNormalization (4D) (640)
                    (30): cudnn.ReLU
                    (31): cudnn.SpatialConvolution(640 -> 640, 3x1, 2,1, 1,0)
                    (32): cudnn.ReLU
                    (33): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,2, 0,1)
                    (34): nn.SpatialBatchNormalization (4D) (640)
                    (35): cudnn.ReLU
                    (36): cudnn.SpatialConvolution(640 -> 640, 3x1, 1,1, 1,0)
                    (37): cudnn.ReLU
                    (38): cudnn.SpatialConvolution(640 -> 640, 1x3, 1,1, 0,1)
                    (39): nn.SpatialBatchNormalization (4D) (640)
                    (40): cudnn.ReLU
                    (41): nn.SpatialAveragePooling(4x4, 1,1)
                  }
                  (2): nn.View(640)
                }
                {
                  _type : torch.CudaTensor
                  output : CudaTensor - empty
                  gradInput : CudaTensor - empty
                  modules : table: 0x400a6de0
                  train : true
            

    }
              2 : 
                nn.Sequential {
                  [input -> (1) -> output]
                  (1): nn.Sequential {
                    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> output]
                    (1): cudnn.SpatialConvolution(3 -> 32, 3x1, 2,1, 1,0)
                    (2): cudnn.ReLU
                    (3): cudnn.SpatialConvolution(32 -> 64, 1x3, 1,2, 0,1)
                    (4): cudnn.SpatialBatchNormalization
                    (5): cudnn.ReLU
                    (6): cudnn.SpatialConvolution(64 -> 128, 3x1, 2,1, 1,0)
                    (7): cudnn.ReLU
                    (8): cudnn.SpatialConvolution(128 -> 128, 1x3, 1,2, 0,1)
                    (9): cudnn.ReLU
                    (10): cudnn.SpatialBatchNormalization
                    (11): cudnn.SpatialConvolution(128 -> 128, 3x1, 2,1, 1,0)
                    (12): cudnn.ReLU
                    (13): cudnn.SpatialConvolution(128 -> 128, 1x3, 1,2, 0,1)
                    (14): cudnn.SpatialBatchNormalization
                    (15): cudnn.ReLU
                    (16): cudnn.SpatialAveragePooling(3x3, 16,16)
                    (17): nn.View(128)
                  }
                }
                {
                  _type : torch.CudaTensor
                  output : CudaTensor - empty
                  gradInput : CudaTensor - empty
                  modules : table: 0x4163b2b0
                  train : true
                }
            }
          train : true
        }
      2 : 
        nn.JoinTable
        {
          _type : torch.CudaTensor
          output : CudaTensor - empty
          gradInput : table: 0x4164bef0
          size : LongStorage - size: 2
          dimension : 2
          train : true
        }
      3 : 
        nn.Sequential {
          [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]
          (1): nn.Linear(768 -> 256)
          (2): nn.BatchNormalization (2D) (256)
          (3): nn.ReLU
          (4): nn.Dropout(0.500000)
          (5): nn.ConcatTable {
            input
              |`-> (1): nn.Linear(256 -> 3)
               `-> (2): nn.Linear(256 -> 26)
               ... -> output
          }
        }
        {
          _type : torch.CudaTensor
          output : table: 0x4164c380
          gradInput : CudaTensor - empty
          modules : 
            {
              1 : 
                nn.Linear(768 -> 256)
                {
                  gradBias : CudaTensor - size: 256
                  output : CudaTensor - empty
                  gradInput : CudaTensor - empty
                  weight : CudaTensor - size: 256x768
                  _type : torch.CudaTensor
                  gradWeight : CudaTensor - size: 256x768
                  addBuffer : CudaTensor - empty
                  bias : CudaTensor - size: 256
                  train : true
                }
              2 : 
                nn.BatchNormalization (2D) (256)
                {
                  gradBias : CudaTensor - size: 256
                  output : CudaTensor - empty
                  bias : CudaTensor - size: 256
                  gradInput : CudaTensor - empty
                  train : true
                  running_var : CudaTensor - size: 256
                  momentum : 0.1
                  save_mean : CudaTensor - empty
                  eps : 0.001
                  _type : torch.CudaTensor
                  affine : true
                  running_mean : CudaTensor - size: 256
           

       gradWeight : CudaTensor - size: 256
                  save_std : CudaTensor - empty
                  weight : CudaTensor - size: 256
                }
              3 : 
                nn.ReLU
                {
                  inplace : true
                  threshold : 0
                  _type : torch.CudaTensor
                  output : CudaTensor - empty
                  gradInput : CudaTensor - empty
                  val : 0
                  train : true
                }
              4 : 
                nn.Dropout(0.500000)
                {
                  v2 : true
                  noise : CudaTensor - empty
                  _type : torch.CudaTensor
                  p : 0.5
                  gradInput : CudaTensor - empty
                  output : CudaTensor - empty
           

       train : true
                }
              5 : 
                nn.ConcatTable {
                  input
                    |`-> (1): nn.Linear(256 -> 3)
                     `-> (2): nn.Linear(256 -> 26)
                     ... -> output
                }
                {
                  _type : torch.CudaTensor
                  output : table: 0x4164f670
                  gradInput : CudaTensor - empty
                  modules : table: 0x4164f7c8
                  train : true
                }
            }
          train : true
        }
    }
  train : true
}
